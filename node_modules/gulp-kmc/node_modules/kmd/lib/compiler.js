var fs = require('fs'),
    path = require('path'),
    iconv = require('iconv-lite'),
    util = require("util");

var START_S = 0,
    SINGLE_S = 1;
    MULTI_S = 2,
    NL = '\n',
    EMPTY = '',
    ESCAPE = '\\',
    START_COMMENT = END_COMMENT = '/',
    OPEN_COMMENT = CLOSE_COMMENT = '*',
    DQUOTE = '"',
    SQUOTE = "'";

function stripComment(input, callback) {
  var current;
  var next;
  var prev;
  var start = -1;
  var state = START_S;
  var output = EMPTY;

  var sstring = dstring = false;

  for (var i = 0; i < input.length; i++) {
    prev = input.charAt(i-1);
    current = input.charAt(i);
    next = input.charAt(i + 1);

    if (START_S === state) {
      switch(current) {
          case DQUOTE:
            if(!sstring) {
              if(ESCAPE !== input.charAt(i - 1)) {
                dstring = !dstring;
              }
            }
            break;
          case SQUOTE:
            if (!dstring) {
              if(ESCAPE !== input.charAt(i - 1)) {
                sstring = !sstring;
              }
            }
            break;
        }
    }

    if (!sstring && !dstring) {

      switch(state) {
        case START_S:

          if(START_COMMENT === current) {
            if( prev == ESCAPE) {
              break;
            }
            if(next == START_COMMENT || next == OPEN_COMMENT) {
                if( start == -1) {
                  start = i;
                }

                state = next == START_COMMENT ? SINGLE_S: MULTI_S;
                i++;
            }
          }
          break;
        case SINGLE_S:
          if(NL === current) {
            state = START_S;
            callback && callback(input.substring(start,i));
            start = -1;
          }
          break;
        case MULTI_S:
          if(CLOSE_COMMENT === current) {
            if(END_COMMENT === next) {
              state = START_S;
              current = EMPTY;
              i++;
              callback && callback(input.substring(start,i+1));
              start = -1;
            }
          }
          break;
      }

      if (START_S !== state) {
        current = EMPTY;
      }
    }

    output = output + current;
  }

  return output;
}

function stripQuote(s) {
    return s && s.replace(/'|"/g,"").trim();
}


function makeArray(item) {
    return util.isArray(item) ? item : [item];
}


function iconvCode(code,charset) {
    code = new Buffer(code);
    code = iconv.decode(code, charset||"utf-8");
    if(/^\uFEFF/.test(code)){
        code = code.toString().replace(/^\uFEFF/, '');
    }
    return code.toString();
}


function wrap(code, options) {
        options = options || {};

        if(options.fromFile) {
            code = fs.readFileSync(code).toString();
        }
        code = iconvCode(code, options.charset);
        var sourceCode = code,
            minifyCode = "",
            wrappedCode = code,
            requires = options.requires? JSON.stringify(options.requires)+",": "";

        if(options.moduleName) {
            options.moduleName = options.moduleName.replace(/\\/g,"/");
        }
        var s = stripComment(code).trim().split(/^(((KISSY|modulex)\s*\.\s*add)|define)\s*\(/)
                                  .filter(function(s){
                                       return s&&s.trim();
                                  });

        if(s.length>1 && s.length<5) {
            //没有填写包名
            var lib = s[0];
            s = s[s.length-1];
            var k;

            s.replace(/(,?)\s*function\s*\([^)]+\)\s*\{/, function(a,b,c,d){
                k = s.substring(c+a.length);
            });
            if(!k) {
              var stack = [];
              k = '\tmodule.exports = '+s.replace(/[()]/g, function(m){
                  if(m == '('){
                    stack.push(1);
                  }else{
                    if(!stack.pop()){
                        return ';\n})';
                    }
                  }
                  return m;
              });
            }
            wrappedCode =lib+'(' + (options.moduleName ? util.format("'%s',%s",options.moduleName,requires ) : '') +  'function('+ (lib.indexOf('KISSY')>-1?'S ,':'') +'require, exports, module) {\n' + k;
            return wrappedCode;
        }

        if(options.kissy) {
            wrappedCode = 'KISSY.add(' + (options.moduleName ? util.format("'%s',%s",options.moduleName,requires ) : '') +  'function(S ,require, exports, module) {\n' + code + '\n});';
        }else if(options.modulex) {
            wrappedCode = 'modulex.add(' + (options.moduleName ? util.format("'%s',%s",options.moduleName,requires ) : '') +  'function(require, exports, module) {\n' + code + '\n});';
        }else {
            wrappedCode = 'define(' + (options.moduleName ? util.format("'%s',%s",options.moduleName,requires ) : '') +  'function(require, exports, module) {\n' + code + '\n});';
        }

        return wrappedCode;
    }

module.exports = {
    stripComment:stripComment,
    stripQuote: stripQuote,
    wrap:wrap
}